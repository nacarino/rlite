#!/bin/bash


no_cmake() {
    echo "Cannot find CMake, required for build of userspace components"
    exit 255
}


HAVE_VMPI="n"
INSTALL_PREFIX="/"

# Option parsing
while [[ $# > 0 ]]
do
    key="$1"
    case $key in
        "--with-vmpi")
        HAVE_VMPI="y"
        ;;

        "--prefix")
        if [ -n "$2" ]; then
            INSTALL_PREFIX=$2
            shift
        else
            echo "--prefix requires a path argument"
            exit 255
        fi
        ;;

        *)
        echo "Unknown option '$key'"
        exit 255
        ;;
    esac
    shift
done

# Check if kernel headers are there for out-of-tree build
if [ ! -d /lib/modules/`uname -r`/build ]; then
    echo "Cannot find '/lib/modules/$(uname -r)/build' directory"
    echo "Make sure headers for the running kernel are installed"
    exit 255
fi

# Make sure CMake is installed
which cmake || no_cmake

# Configure CMake for out-of-tree build
rm -rf build &> /dev/null
mkdir build || exit 255

(
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=Debug
)

# Generate the main Makefile (just a trivial copy)
cp Makefile.in Makefile

# Generate the kernel Makfile
cp kernel/Makefile.in kernel/Makefile
if [ $HAVE_VMPI == "y" ]; then
    cat << EOS >> kernel/Makefile

obj-m += rlite-shim-hv.o
rlite-shim-hv-y := shim-hv.o shim-hv-numtables.o

EXTRA_CFLAGS += -I\$(PWD)/kernel/vmpi

obj-y += vmpi/
EOS

cd kernel/vmpi
git clean -fdx .
tar -zxvf vmpi-*.tar.gz
rm vmpi/vmpi-bufs.c vmpi/vmpi-bufs.h
mv vmpi/* .
rm -rf vmpi
# Delete the vmpi-bufs module line
sed -i '/vmpi-bufs/d' Makefile
# Insert a line to set include directives
sed -i '1 i \
EXTRA_CFLAGS := -I$(PWD)/include' Makefile
cd ../..

fi

sed "s|HAVE_VMPI|${HAVE_VMPI}|g" in.prepare.sh > prepare.sh
sed "s|HAVE_VMPI|${HAVE_VMPI}|g" in.unprepare.sh > unprepare.sh
chmod +x prepare.sh
chmod +x unprepare.sh
